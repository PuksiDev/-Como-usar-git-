¿Que es git?
Git es un sistema de control de versiones.Existen muchos sistemas de control de versiones, pero uno de los más populares es git.

COMANDOS BASICOS 
* git init            (Oye Git, voy a usar estos documentos contigo ¿vale?).
* git add <file>      (pasar los archivos del working directory al staging area).
* git add .           (Pasa todos los archivos).

* git commit          (Pasa los docs de staging area a repository. 
                       Después de esto se te va a abrir el editor de código VIN en donde tendrás que escribir 
                       un comentario, y despues escribir lo siguiente [  :wq   ]
                       si te quieres evitar abrir VIN entonces 
                       utiliza los siguientes comandos).
* git commit -m "comentario" (Lo mismo que el commit regular, pero ahora no necesitas entrar a VIN).


* git status             (Ver en que estado estan tus archivos, si estan en working directory, staging area o repository (wd, sa, r) están los docs).
* git log                (Para ver todos commints que hemos creado).
* git push               (Subir los docs a un server [Github]).
* git pull               (En caso de que estes trabajando con multiples desarrolladores, te traes los cambios que an hecho los otros desarrolladores).
* git clone              (Hacerte una copia de lo que está en el server a tu PC).
* git checkout -- <file> (Para revertir los cambios de los archivos).
* git diff <file>        (Para ver las diferencias hechas en los archivos).
* git branch             (Ver las ramas que hay ["master" es la rama default]).
* git branch "nombre"    (Crear una nueva rama).
* git checkout "nombre"  (Ir a una rama en especifico).

*  git config -- global user.email "email" (Para configurar email del usuario).
*  git config -- global user.name "nombre" (Para configurar nombre del usuario).


vin Es el editor de código de git desde la consola, ahí escribes un comentario para la nueva versión que estés versionando (si no te deja escribir presiona a letra i). Cuando termines presiona esc y luego :wq (write & quit)pasa salir.

.gitignore (Es un archivo reservado de git que tenemos que crear si queremos decirle a git los archivos que no vamos a utilizar y así decida ignorarlos.
            Escribe dentro de el archivo .gitignore los nombres de los archivos que desees ignorar.
            Nota: Las carpetas se escriben solas y los archivos con su terminación).

________________________________________________________________________________________________
                                     ¡¡¡importante!!!

Puedes volver a una revisión antigua usando checkout y pasando el hash del commit. Por ejemplo:

                   git checkout ab25f1ln2b4o3a9c4u1v6k4n1m7 .

No olvides el punto al final. También puedes descartar cambios mediante reset pasándole el numero de commits. Por ejemplo, para descartar los últimos 3 commits:

                   git reset --hard HEAD~3

La diferencia entre checkout y reset es que en éste último se descartan las revisiones, mientras que con checkout se preservan.

--------------------------------------------------------------------------------------------------
                                    subir tu proyecto a github.

Una ves que creas tu primera version con un (commit). Deberas hacer lo siguiente:

Usar lo siguientes dos comandos:

* git remote add origin (aquí va la direccion de tu repositorio en github donde se guardara tu proyecto)

* git push -u origin (aquí va la rama actual)

Despues de ejecutar estos comandos solo tendras que iniciar sesión en git para autorizar subir tu proyecto.

Para traer tu proyecto guardado en git a tu pc u cualquier otra, solo necesitas usar el siguiente comando:

* git clone (aquí va la direccion de tu repositorio en github donde se guarda tu proyecto)


